{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['react', 'react-dom', 'spin.js', 'prop-types', 'create-react-class'], factory);\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory(require('react'), require('react-dom'), require('spin.js'), require('prop-types'), require('create-react-class'));\n  } else {\n    root.Loader = factory(root.React, root.ReactDOM, root.Spinner, root.PropTypes, root.createReactClass);\n  }\n})(this, function (React, ReactDOM, Spinner, PropTypes, createReactClass) {\n  var Loader = createReactClass({\n    propTypes: {\n      className: PropTypes.string,\n      color: PropTypes.string,\n      component: PropTypes.any,\n      corners: PropTypes.number,\n      direction: PropTypes.oneOf([1, -1]),\n      fps: PropTypes.number,\n      hwaccell: PropTypes.bool,\n      left: PropTypes.string,\n      length: PropTypes.number,\n      lines: PropTypes.number,\n      loaded: PropTypes.bool,\n      loadedClassName: PropTypes.string,\n      opacity: PropTypes.number,\n      options: PropTypes.object,\n      parentClassName: PropTypes.string,\n      position: PropTypes.string,\n      radius: PropTypes.number,\n      rotate: PropTypes.number,\n      scale: PropTypes.number,\n      shadow: PropTypes.bool,\n      speed: PropTypes.number,\n      top: PropTypes.string,\n      trail: PropTypes.number,\n      width: PropTypes.number,\n      zIndex: PropTypes.number\n    },\n    getDefaultProps: function () {\n      return {\n        component: 'div',\n        loadedClassName: 'loadedContent',\n        parentClassName: 'loader'\n      };\n    },\n    getInitialState: function () {\n      return {\n        loaded: false,\n        options: {}\n      };\n    },\n    componentDidMount: function () {\n      this.updateState(this.props);\n    },\n    componentWillReceiveProps: function (nextProps) {\n      this.updateState(nextProps);\n    },\n    componentWillUnmount: function () {\n      this.setState({\n        loaded: false\n      });\n    },\n    updateState: function (props) {\n      props || (props = {});\n      var loaded = this.state.loaded;\n      var options = this.state.options; // update loaded state, if supplied\n\n      if ('loaded' in props) {\n        loaded = !!props.loaded;\n      } // update spinner options, if supplied\n\n\n      var allowedOptions = Object.keys(this.constructor.propTypes);\n      allowedOptions.splice(allowedOptions.indexOf('loaded'), 1);\n      allowedOptions.splice(allowedOptions.indexOf('options'), 1); // allows passing options as either props or as an option object\n\n      var propsOrObjectOptions = 'options' in props ? props.options : props;\n      allowedOptions.forEach(function (key) {\n        if (key in propsOrObjectOptions) {\n          options[key] = propsOrObjectOptions[key];\n        }\n      });\n      this.setState({\n        loaded: loaded,\n        options: options\n      }, this.spin);\n    },\n    spin: function () {\n      var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n      if (canUseDOM && !this.state.loaded) {\n        var spinner = new Spinner(this.state.options);\n        var target = ReactDOM.findDOMNode(this.refs.loader); // clear out any other spinners from previous renders\n\n        target.innerHTML = '';\n        spinner.spin(target);\n      }\n    },\n    render: function () {\n      var props, children;\n\n      if (this.state.loaded) {\n        props = {\n          key: 'content',\n          className: this.props.loadedClassName\n        };\n        children = this.props.children;\n      } else {\n        props = {\n          key: 'loader',\n          ref: 'loader',\n          className: this.props.parentClassName\n        };\n      }\n\n      return React.createElement(this.props.component, props, children);\n    }\n  });\n  return Loader;\n});","map":null,"metadata":{},"sourceType":"script"}